name: CI / CD (Backend only)

on:
  push:
    branches: [develop]      

jobs:
  CI:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: doctalk-backend          # ECR 리포지토리 이름 (원하는 이름으로)
      IMAGE_TAG: ${{ github.sha }}

    defaults:
      run:
        working-directory: backend         # ✅ 모든 run 스텝의 작업 경로를 backend로

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install dependencies
        run: npm ci

      - name: Build (if present)
        run: npm run build --if-present

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | \
          docker login --username AWS \
            --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build & Push Docker Image
        run: |
          IMAGE_URI=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          # Dockerfile과 컨텍스트는 backend/ 기준
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI

  CD:
    runs-on: ubuntu-latest
    needs: CI

    env:
      IMAGE_NAME: doctalk-backend
      IMAGE_TAG: ${{ github.sha }}
      AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
      AWS_REGION: ${{ secrets.AWS_REGION }}

    steps:
      - name: Upload .env.production to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DEPLOY_SERVER_HOST }}
          username: ${{ secrets.DEPLOY_SERVER_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}

      - name: SSH into EC2 & run container
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_SERVER_HOST }}
          username: ${{ secrets.DEPLOY_SERVER_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script: |
            set -e
            IMAGE_NAME=${{ env.IMAGE_NAME }}
            IMAGE_TAG=${{ env.IMAGE_TAG }}
            AWS_ACCOUNT_ID=${{ secrets.AWS_ACCOUNT_ID }}
            AWS_REGION=${{ secrets.AWS_REGION }}

            # 네트워크
            sudo docker network create --driver bridge app-network || true

            # 기존 컨테이너 정리
            sudo docker stop $IMAGE_NAME || true
            sudo docker rm $IMAGE_NAME || true

            # ECR 로그인 & 이미지 pull
            sudo docker login --username AWS \
              --password $(aws ecr get-login-password --region $AWS_REGION) \
              $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com

            sudo docker pull $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_NAME:$IMAGE_TAG

            # 백엔드 컨테이너 실행
            sudo docker run -d \
              --name $IMAGE_NAME \
              --network app-network \
              -p 8080:8081 \
              --env-file ~/.env.production \
              $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/$IMAGE_NAME:$IMAGE_TAG
